<?php
namespace CsnUser\Controller;

use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;

// DBAL with ResultSet Hydrator
use Zend\Db\Adapter\Driver\ResultInterface;
use Zend\Db\ResultSet\HydratingResultSet;
use Zend\Stdlib\Hydrator\Reflection as ReflectionHydrator;
use CsnUser\Entity\UserEntity;

// DBAL with simple ResultSet
use Zend\Db\ResultSet\ResultSet;
use CsnUser\Model\User;

use Zend\Db\TableGateway\TableGateway; // for table data Gateway

use CsnUser\Form\UserForm;
use CsnUser\Form\UserFilter;

class UserController extends AbstractActionController
{
/* // 1) Oldes way with MySQL API functions 
	// R - Retrieve
    public function indexAction()
    {
		// 1) Using MySQL API
		$link = mysql_connect('localhost', 'root', 'password');
		if (!$link) {
			die('Could not connect: ' . mysql_error());
		}
		// echo 'Connected successfully';
		
//		$sql    = 'SELECT usr_id FROM fmi.users WHERE usr_id = 1';
		$sql    = 'SELECT * FROM fmi.users';
		$result = mysql_query($sql, $link);

		if (!$result) {
			echo "DB Error, could not query the database\n";
			echo 'MySQL Error: ' . mysql_error();
			exit;
		}
		// var_dump($result);
		$rows = Array();
		while ($row = mysql_fetch_assoc($result)) {
			// echo $row['usr_id'];
			$rows[] = $row;
		}
		
		mysql_free_result($result);
		
		mysql_close($link);
		
        return new ViewModel(array('rows' => $rows));
    }
*/
/*
 // 2) Using DBAL in this case Zend\Db\Adapter\Adapter
	// R - Retrieve
    public function indexAction()
    {
		$adapter = $this->getServiceLocator()->get('Zend\Db\Adapter\Adapter');

//		$adapter = new \Zend\Db\Adapter\Adapter(array(
//			'driver' => 'Mysqli',
//			'database' => 'fmi',
//			'username' => 'root',
//			'password' => 'password'
//		 ));
		 
		// $adapter->query('SELECT * FROM `users` WHERE `id` = ?', array(5));
		// $sql = $adapter->query('SELECT * FROM `users`');
//-		$statement = $adapter->query('SELECT * FROM users'); // Zend\Db\Adapter\Driver\Pdo\Result Object
		// or
		$statement = $adapter->createStatement('SELECT * FROM users'); //, $optionalParameters);
		// $optionalParameters = Array();
		// $statement = $adapter->createStatement($sql, $optionalParameters);
		$results = $statement->execute();
//		echo '<pre>';
//		print_r($results);
//		echo '</pre>';
		
//		$row = $results->current();
		
        return new ViewModel(array('results' => $results)); //, 'row' => $row));
	}
*/
/*
 // 2.2) Using DBAL in this case Zend\Db\Adapter\Adapter AND ResultSet
	// R - Retrieve
    public function indexAction()
    {
		$adapter = $this->getServiceLocator()->get('Zend\Db\Adapter\Adapter');

//		$adapter = new \Zend\Db\Adapter\Adapter(array(
//			'driver' => 'Mysqli',
//			'database' => 'fmi',
//			'username' => 'root',
//			'password' => 'password'
//		 ));
		 
		// $adapter->query('SELECT * FROM `users` WHERE `id` = ?', array(5));
		// $sql = $adapter->query('SELECT * FROM `users`');
//-		$statement = $adapter->query('SELECT * FROM users'); // Zend\Db\Adapter\Driver\Pdo\Result Object
		// or
		$statement = $adapter->createStatement('SELECT * FROM users'); //, $optionalParameters);
		// $optionalParameters = Array();
		// $statement = $adapter->createStatement($sql, $optionalParameters);
		$results = $statement->execute();
//		echo '<pre>';
//		print_r($results);
//		echo '</pre>';
		
//		$row = $results->current();
		
		//!!!!!!!!!!!!!!!!!!
		if ($results instanceof ResultInterface && $results->isQueryResult()) {
			$resultSet = new HydratingResultSet(new ReflectionHydrator, new UserEntity);
			$resultSet->initialize($results);
		}
		
        return new ViewModel(array('resultSet' => $resultSet)); //, 'row' => $row));
	}
*/

	// 3) Using Zend Implementation of table Data Gateway right from the box No inheritance or composition
	// or you can inherit but best s t inherit the Abstract class
	protected $_usersTable = null;
	// R - Retrieve. If I want just to extraxt lets use AbstarctClass
    public function indexAction()
    {
		$usersTable = $this->getUsersTable();
		// returns Zend\Db\ResultSet\ResultSet Object
		$rowset = $usersTable->select(); // array('type' => 'PHP')
//		echo '<pre>';
//		print_r($rowset); // Zend\Db\ResultSet\ResultSet Object
//		echo '</pre>';
//		echo 'Users: ';
//		foreach ($rowset as $userRow) {
//			 echo $userRow['usr_name'] . PHP_EOL;
//		}
		// with the Row gateway Object returns Zend\Db\RowGateway\RowGateway Object
		// Without the feature returns simply ArrayObject Object
        return new ViewModel(array('rowset' => $rowset));		
	}	
	
	// C - Create
    public function createAction()
    {
		// $link = mysql_connect('localhost', 'root', 'password');
		$form = new UserForm();
		$request = $this->getRequest();
        if ($request->isPost()) {
			$form->setInputFilter(new UserFilter());
			$form->setData($request->getPost());
			 if ($form->isValid()) {
				$data = $form->getData();
				unset($data['submit']);
				if (empty($data['usr_registration_date'])) $data['usr_registration_date'] = '2013-07-19 12:00:00';
				$this->getUsersTable()->insert($data);
				return $this->redirect()->toRoute('csn_user/default', array('controller' => 'user', 'action' => 'index'));									
			}
		}
        return new ViewModel(array('form' => $form));
    }
	
	// U - Update
    public function updateAction()
    {
		// $link = mysql_connect('localhost', 'root', 'password');
		$id = $this->params()->fromRoute('id');
		if (!$id) return $this->redirect()->toRoute('csn_user/default', array('controller' => 'user', 'action' => 'index'));
		$form = new UserForm();
		$request = $this->getRequest();
        if ($request->isPost()) {
			$form->setInputFilter(new UserFilter());
			$form->setData($request->getPost());
			 if ($form->isValid()) {
				$data = $form->getData();
				unset($data['submit']);
				if (empty($data['usr_registration_date'])) $data['usr_registration_date'] = '2013-07-19 12:00:00';
				$this->getUsersTable()->update($data, array('usr_id' => $id));
				return $this->redirect()->toRoute('csn_user/default', array('controller' => 'user', 'action' => 'index'));									
			}
		}
		else {
			$form->setData($this->getUsersTable()->select(array('usr_id' => $id))->current());
		}
        return new ViewModel(array('form' => $form, 'id' => $id));
    }
	
	// D - Delete
    public function deleteAction()
    {
		$id = $this->params()->fromRoute('id');
		if ($id) {
			$this->getUsersTable()->delete(array('usr_id' => $id));
		}
		
		return $this->redirect()->toRoute('csn_user/default', array('controller' => 'user', 'action' => 'index'));									
    }
	
	// prepare UsersTable - Gateway
	// 1) With ROww Data Gateway right form the box with \Zend\Db\TableGateway\Feature\RowGatewayFeature
	public function getUsersTable()
	{
		// I have a Table data Gateway ready to go right out of the box
		if (!$this->_usersTable) {
			$this->_usersTable = new TableGateway(
				'users', 
				$this->getServiceLocator()->get('Zend\Db\Adapter\Adapter')
//				new \Zend\Db\TableGateway\Feature\RowGatewayFeature('usr_id') // Zend\Db\RowGateway\RowGateway Object
//				ResultSetPrototype
			);
		}
		return $this->_usersTable;
	}
/*	
	// 2) With simple Result For Zend\Db\ResultSet\ResultSet
	// prepare UsersTable - Gateway
	public function getUsersTable()
	{
		// 
        $resultSetPrototype = new ResultSet();
        $resultSetPrototype->setArrayObjectPrototype(new User()); // Notice what is set here
        return new TableGateway('users', $dbAdapter, null, $resultSetPrototype);
		if (!$this->_usersTable) {
			$this->_usersTable = new TableGateway(
				'users', 
				$this->getServiceLocator()->get('Zend\Db\Adapter\Adapter'),
//				new \Zend\Db\TableGateway\Feature\RowGatewayFeature('usr_id') // Zend\Db\RowGateway\RowGateway Object
				$resultSetPrototype
			);
		}
		return $this->_usersTable;
	}
	
	// 3) With Entity like with Doctrine
	// prepare UsersTable - Gateway
	public function getUsersTable()
	{
		// 
		$resultSetPrototype = new HydratingResultSet(new ReflectionHydrator, new UserEntity);
		if (!$this->_usersTable) {
			$this->_usersTable = new TableGateway(
				'users', 
				$this->getServiceLocator()->get('Zend\Db\Adapter\Adapter'),
//				new \Zend\Db\TableGateway\Feature\RowGatewayFeature('usr_id') // Zend\Db\RowGateway\RowGateway Object
				$resultSetPrototype
			);
		}
		return $this->_usersTable;
	}
*/
}